enum ApplicationStatus {
    WAITING_FOR_SCHOOL_APPROVAL
    APPROVED_BY_SCHOOL

    WAITING_FOR_ORGANIZER_APPROVAL
    REJECTED_BY_ORGANIZER

    REGISTERED
}

enum AccountType {
    ORGANIZER
    SCHOOL
    TEAM
}

enum NotificationTopic {
    TEAM_REGISTERED

    TEAM_APPROVED_BY_SCHOOL
    TEAM_APPROVED_BY_ORGANIZER
    TEAM_REJECTED_BY_ORGANIZER
    TEAM_UPDATE

    COMPETITION_ANNOUNCEMENT
}

enum NotificationType {
    INFO
    SUCCESS
    WARNING
    ERROR
}

enum NotificonStatus {
    UNREAD
    READ
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    accountId String
    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Account {
    id String @id @default(cuid())

    username String @unique
    password String
    salt     String

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    type     AccountType
    sessions Session[]

    emails Email[]

    team      Team?
    school    School?
    organizer Organizer?

    notificationsSent     Notification[] @relation("Sender")
    notificationsReceived Notification[] @relation("Receiver")
}

model Member {
    id String @id @default(cuid())

    name String
    year Int

    isReserve Boolean @default(false)

    teamId String
    Team   Team   @relation(fields: [teamId], references: [id])
}

model Coach {
    id String @id @default(cuid())

    name String

    teamId String
    Team   Team   @relation(fields: [teamId], references: [id])

    schoolName String
    School     School @relation(fields: [schoolName], references: [name])
}

model Team {
    id String @id @default(cuid())

    name   String
    status ApplicationStatus @default(WAITING_FOR_SCHOOL_APPROVAL)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    members      Member[]
    coaches      Coach[]
    technologies Technology[]

    schoolName String
    school     School @relation(fields: [schoolName], references: [name])

    accountId String  @unique
    account   Account @relation(fields: [accountId], references: [id])

    subCategoryId String
    SubCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

    competitionId String
    Competition   Competition @relation(fields: [competitionId], references: [id])

    applicationForm String? // link to the photo of the application form
}

model School {
    id String @id @default(cuid())

    name    String @unique
    address String

    contactName String

    teams   Team[]
    coaches Coach[]

    accountId String  @unique
    account   Account @relation(fields: [accountId], references: [id])
}

model Organizer {
    id String @id @default(cuid())

    name String

    competitions Competition[]

    accountId String  @unique
    account   Account @relation(fields: [accountId], references: [id])
}

model Technology {
    id String @id @default(cuid())

    name String @unique

    competitions Competition[]
    teams        Team[]
}

// WILL BE LIKE "Programozás" || "Biológia"
model Category {
    id String @id @default(cuid())

    name        String @unique
    description String

    competitions Competition[]
}

// WILL BE LIKE "Webfejlesztés" || "Mobilprogramozás"
model SubCategory {
    id   String @id @default(cuid())
    name String

    Team Team[]

    competitionId String
    Competition   Competition @relation(fields: [competitionId], references: [id])
}

model Competition {
    id String @id @default(cuid())

    name        String
    description String   @db.Text
    image       String   @db.LongText
    maxTeamSize Int
    deadline    DateTime

    organizers Organizer[]

    technologies  Technology[]
    categories    Category[]
    teams         Team[]
    subCategories SubCategory[]
    notifications Notification[]
}

model Email {
    id    String @id @default(cuid())
    email String @unique

    accountId String
    account   Account @relation(fields: [accountId], references: [id])
}

model Notification {
    id String @id @default(cuid())

    subject String
    message String
    type    NotificationType
    topic   NotificationTopic
    status  NotificonStatus   @default(UNREAD)

    redirectTo String?

    createdAt DateTime @default(now())

    senderAccountId String
    senderAccount   Account @relation(fields: [senderAccountId], references: [id], name: "Sender")

    receiverAccountId String
    receiverAccount   Account @relation(fields: [receiverAccountId], references: [id], name: "Receiver")

    competitionId String?
    Competition   Competition? @relation(fields: [competitionId], references: [id])
}
