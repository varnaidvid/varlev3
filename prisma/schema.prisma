enum ApplicationStatus {
    REGISTERED
    APPROVED_BY_SCHOOL
    APPROVED_BY_ORGANIZER
}

enum AccountType {
    ORGANIZER
    SCHOOL
    TEAM
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    accountId String
    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Account {
    id String @id @default(cuid())

    username String @unique
    password String
    salt     String

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    type     AccountType
    sessions Session[]

    team      Team?
    school    School?
    organizer Organizer?

    notificationsSent     Notification[] @relation("Sender")
    notificationsReceived Notification[] @relation("Receiver")
}

model Member {
    id String @id @default(cuid())

    name String
    year Int

    email String?

    isReserve Boolean @default(false)

    teamId String
    Team   Team   @relation(fields: [teamId], references: [id])
}

model Coach {
    id String @id @default(cuid())

    name String

    teamId String
    Team   Team   @relation(fields: [teamId], references: [id])

    School     School @relation(fields: [schoolName], references: [id])
    schoolName String
}

model Team {
    id String @id @default(cuid())

    name   String
    status ApplicationStatus @default(REGISTERED)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    schoolName String
    school     School @relation(fields: [schoolName], references: [id])

    accountId String  @unique
    account   Account @relation(fields: [accountId], references: [id])

    members Member[]
    coaches Coach[]

    competitionId String
    Competition   Competition @relation(fields: [competitionId], references: [id])
}

model School {
    id String @id @default(cuid())

    name    String @unique
    address String

    contactName  String
    contactEmail String

    teams   Team[]
    coaches Coach[]

    accountId String  @unique
    account   Account @relation(fields: [accountId], references: [id])
}

model Organizer {
    id String @id @default(cuid())

    name  String
    email String?

    accountId String  @unique
    account   Account @relation(fields: [accountId], references: [id])
}

model Technology {
    id String @id @default(cuid())

    name String @unique

    competitions Competition[]
}

model Category {
    id String @id @default(cuid())

    name        String @unique
    description String

    competitions Competition[]
}

model Competition {
    id String @id @default(cuid())

    name        String
    description String
    image       String
    maxTeamSize Int
    deadline    DateTime

    technologies Technology[]
    categories   Category[]
    teams        Team[]
}

model Notification {
    id String @id @default(cuid())

    title   String
    message String

    createdAt DateTime @default(now())

    senderAccountId String
    senderAccount   Account @relation(fields: [senderAccountId], references: [id], name: "Sender")

    receiverAccountId String
    receiverAccount   Account @relation(fields: [receiverAccountId], references: [id], name: "Receiver")
}
